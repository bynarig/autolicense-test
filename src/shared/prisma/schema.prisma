// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/.prisma/client"
  previewFeatures = ["prismaSchemaFolder"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Include User model
model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String?   @unique
  password  String?
  username  String?   @unique
  name      String
  avatarUrl String?
  createdAt DateTime  @default(now())
  editedAt  DateTime?
  deletedAt DateTime?

  lastLogin     DateTime?

  resetToken       String?
  resetTokenExpiry DateTime?

  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  subscriptionLVL       Int       @default(0)
  subscriptionType      String?
  subscriptionExpiresAt DateTime?

  role Role @default(UNAPPROVED)

  test     Test[]
  Question Question[]
}

enum Role {
  UNAPPROVED
  USER
  ADMIN
}

model Test {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  editedAt  DateTime?
  deletedAt DateTime?

  category      String[] @default(["main"])
  tags          String[]
  title         String?
  slug          String?  @unique
  description   String?
  difficulty    String?
  timeCompleted Int?
  content       String?
  published     Boolean  @default(false)

  views    Int  @default(0)
  attempts Int  @default(0)
  maxScore Int?

  Question Question[]

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])
}

model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  imageUrl    String?
  explanation String?
  category    String[] @default(["main"])
  type        String?
  order       Int?
  points      Int      @default(1)

  testId String? @db.ObjectId
  Test   Test?   @relation(fields: [testId], references: [id])

  answers Answer[]

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  questionDiscussion QuestionDiscussion?
}

model Answer {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  isTrue   Boolean
  price    Int     @default(1)
  feedback String?

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
}

type QuestionDiscussion {
  text String
}
